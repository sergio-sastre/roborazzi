plugins {
  id "org.jetbrains.kotlin.jvm"
  id "com.vanniktech.maven.publish"
  id 'jvm-test-suite'
}
apply plugin: 'java-gradle-plugin'

java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(11))
  }
}

def integrationTestDep = sourceSets.create('integrationTestDep')

dependencies {
  compileOnly gradleApi()
  compileOnly "com.android.tools.build:gradle:7.3.1"
  implementation project(':roborazzi-core')
  implementation 'org.json:json:20220924'
  integrationTestDepImplementation "com.android.tools.build:gradle:7.3.1"
  integrationTestDepImplementation "org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.20"
}

sourceSets {
  main.java.srcDir 'src/generated/kotlin'
}


testing {
  suites {
    integrationTest(JvmTestSuite) {
      useJUnit()
      sources.kotlin.srcDirs = ["src/integrationTest/java"]
      sources.java.srcDirs = ["src/integrationTest/java"]
      dependencies {
        implementation project()
        implementation gradleTestKit()
        implementation "junit:junit:4.13.2"
        implementation 'com.android.tools.build:gradle:7.3.1'
      }

      targets {
        all {
          testTask.configure {
            shouldRunAfter(test)
          }
        }
      }
      tasks.withType(PluginUnderTestMetadata.class).named("pluginUnderTestMetadata").configure {
        it.pluginClasspath.from(integrationTestDep.runtimeClasspath)
      }
    }
  }
}

gradlePlugin {
  testSourceSets sourceSets.integrationTest
}

gradlePlugin {
  plugins {
    roborazzi {
      id = 'io.github.takahirom.roborazzi'
      implementationClass = 'io.github.takahirom.roborazzi.RoborazziPlugin'
    }
  }
}


tasks.named('check') {
  dependsOn(testing.suites.integrationTest)
}

